module Value
  def run: (untyped env) -> untyped

  def self?.from: (untyped value) -> untyped
end

class Integer
  include Value
end

class String
  include Value
end

class Array
  include Value
end

module Stick
  class NativeFunction[T]
    include Value

    attr_reader name: String

    def initialize: (String name, String casts, ?push: bool, ?env: bool) 
        { T -> Value } -> void

    def arity: () -> Integer
    def inspect: () -> String
    def call: (Environment env) -> void
  end

  class Group
    include Value

    attr_reader body: Array[Value]

    attr_reader location: untyped

    def initialize: (untyped body, untyped location) -> void

    def inspect: () -> ::String

    def call: (untyped env) -> untyped
  end

  class Variable
    include Value

    attr_reader name: untyped

    def initialize: (untyped name) -> void

    def inspect: () -> ::String

    def run: (untyped env) -> untyped
  end
end
