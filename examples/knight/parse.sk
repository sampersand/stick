"../prelude.sk" import

:peek { dup 0 1 substr } def
:advance { dup strlen 1 swap substr } def
:peek-advance { peek swap advance swap } def

:isspace { "\s\r\n\t\f():" str-contains } def
:isdigit { dup "0" ge { "9" le } { pop false } if } def

:islower {
	dup isdigit {
		dup "_" eq {
			dup "a" ge { "z" le } { pop false } if
		} ||
	} ||
} def

:isupper {
	dup "_" eq {
		dup "A" ge { "Z" le } { pop false } if
	} ||
} def

:take-while {
	""
	rot
	{ peek dup4 call } { peek swap rot* . swap advance } while
	swap pop3
} def


:parse-function {
	swap dup2 arity dup a2b times { pop parse } map
	rot lookup-fn AST rot* swap explode b2a 2+ implode
} def

:parse {
	peek [
		{ "#" eq } => { { "\n" ne } take-while pop parse }
		{ isspace } => { advance parse }
		{ isdigit } => { { isdigit } take-while new-num }
		{ islower } => { { islower } take-while new-var }
		{ dup "'" eq swap """ eq | } => {
			peek-advance swap
			{ 5 dupn ne } take-while ( yes we're relying on take-while impl behaviour. )
			pop3 swap advance swap
			new-str
		}
		{ isupper } => { peek swap { isupper } take-while pop swap parse-function }
		default { peek-advance parse-function }
	] switch
} def
